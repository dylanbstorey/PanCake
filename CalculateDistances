#!/usr/bin/perl
# Copyright (c) 2015 Dylan B Storey

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use warnings;
use strict;
use Getopt::Long;
use Data::Dumper;
use File::Basename;
use Tie::File;


my $manifest_file = '';
my @print_buffer = ();
my $help = 0;

GetOptions(
	'manifest:s' => \$manifest_file,
	'help+' => \$help,
	'h+' => \$help
	) || die usage();

die usage() unless ($manifest_file);
die usage() if ($help);

#test required pieces
my $AUX_BIN_DIR = "/usr/lib/mummer";
my $BIN_DIR = "/usr/bin";
my $SCRIPT_DIR = "/usr/share/perl5/";

map{
	die "Can't find $_ !" unless -e $_;
	} ("$BIN_DIR/mummer","$BIN_DIR/mgaps","$BIN_DIR/show-coords","$AUX_BIN_DIR/postnuc","$AUX_BIN_DIR/prenuc") ;

#-- Set up the program path names
my $algo_path = "$BIN_DIR/mummer";
my $mgaps_path = "$BIN_DIR/mgaps";
my $prenuc_path = "$AUX_BIN_DIR/prenuc";
my $postnuc_path = "$AUX_BIN_DIR/postnuc";
my $showcoords_path = "$BIN_DIR/show-coords";

#set signal handler for killed runs.
$SIG{INT}  = \&signal_handler;
$SIG{TERM} =\&signal_handler;



#Set all of our file names;
my $pairs_db = fileparse($manifest_file, qr/\.[^.]*/);
my $out = $pairs_db . '.pairs';


if (-e $out){
	open (OUT , '>>' , $out) || die $!;	
	}
else{
	open (OUT , '>', $out) || die $!;
	}

my @manifest; 
open (MANIFEST, '<' , $manifest_file) || die $!;
@manifest = <MANIFEST>; chomp @manifest;
close (MANIFEST);

my $update_counter = 0;



while  (@manifest){
	my $line = shift @manifest;
	
	my ($ref , $query) = split (/\s/,$line);
	my $r_base = (fileparse($ref, qr/\.[^.]*/))[0];
	my $q_base = (fileparse($query, qr/\.[^.]*/))[0];


	#Run Pre-Nuc
	unless (-e "$r_base.ntref"){
		my $system = "$prenuc_path $ref > $r_base.ntref";
		unless (system("$system") == 0){
			print STDERR "prenuc returned non zero status for $r_base\n";
			die;
			}
		}

	unless (-e "$q_base.ntref"){
		my $system = "$prenuc_path $query > $q_base.ntref";
		unless (system("$system") == 0){
			print STDERR "prenuc returned non zero status for $q_base\n";
			die;
			}
		}



	#Run mummer | mgaps ref -> query
	open(ALGO_PIPE, "$algo_path -mum -b -l 44 -n $r_base.ntref $query 2> /dev/null |") || die ("Couldn't open pipe!");
	open(CLUS_PIPE, "| $mgaps_path -l 65 -s 90 -d 5 -f .12 > $r_base\_$q_base.mgaps 2> /dev/null ") || die ("Couldn't open pipe!");
	while(<ALGO_PIPE>){
		print CLUS_PIPE or die "Couldn't write to $mgaps_path pipe $!"; 
		}
	close ALGO_PIPE || die ("ALGO_PIPE returned non zero");
	close CLUS_PIPE || die ("CLUS_PIPE returned non zero");

	#Run mummer | mgaps ref <- query
	open(ALGO_PIPE, "$algo_path -mum -b -l 44 -n $q_base.ntref $ref 2> /dev/null |") || die ("Couldn't open pipe!");
	open(CLUS_PIPE, "| $mgaps_path -l 65 -s 90 -d 5 -f .12 > $q_base\_$r_base.mgaps 2> /dev/null  ") || die ("Couldn't open pipe!");
	while(<ALGO_PIPE>){
		print CLUS_PIPE or die "Couldn't write to $mgaps_path pipe $!";
		}
	close ALGO_PIPE || die ("ALGO_PIPE returned non zero");
	close CLUS_PIPE || die ("CLUS_PIPE returned non zero");

	#Run post nuc
	system("$postnuc_path -b 200 -B 5 $ref $query $r_base\_$q_base < $r_base\_$q_base.mgaps 2> /dev/null ") == 0 || die "postnuc failed!";
	system("$postnuc_path -b 200 -B 5 $query $ref $q_base\_$r_base < $q_base\_$r_base.mgaps 2> /dev/null") == 0 || die "postnuc failed!";

	#Run show coords
	my $show_coords1 = "show-coords -dTlorH $r_base\_$q_base.delta > $r_base\_$q_base.coords 2> /dev/null";
	my $show_coords2 = "show-coords -dTlorH $q_base\_$r_base.delta > $q_base\_$r_base.coords 2> /dev/null";
		
	unless(system($show_coords1)== 0){
		unlink("$r_base\_$q_base.coords");
		print STDERR "$r_base\_$q_base.coords show-coords failed";
		die;
		}

	unless(system($show_coords2)== 0){
		unlink("$q_base\_$r_base.coords");
		print STDERR "$q_base\_$r_base.coords show-coords failed";
		die;
		}

		

	#Get our pairs;
	my $distance = (calc_distance("$q_base\_$r_base.coords") + calc_distance("$r_base\_$q_base.coords")) / 2;
	push (@print_buffer ,  "$r_base\t$q_base\t$distance\n");
	#delete our files;
	map {unlink($_)}( "$q_base\_$r_base.coords" , "$r_base\_$q_base.coords" , "$r_base\_$q_base.delta","$q_base\_$r_base.delta", "$r_base\_$q_base.mgaps","$q_base\_$r_base.mgaps" );
	$update_counter++;
	if ($update_counter == 100){
		open (MANIFEST, '>' , $manifest_file) || die $!;
		print MANIFEST join("\n",@manifest);
		print OUT join('',@print_buffer);
		close MANIFEST;
		$update_counter = 0;
		}

	}
	

open (MANIFEST, '>' , $manifest_file) || die $!;
print MANIFEST join("\n",@manifest);
print OUT join('',@print_buffer);
close MANIFEST;
unlink $manifest_file if -z $manifest_file;

close OUT;

exit;


sub signal_handler {
	open (MANIFEST, '>' , $manifest_file) || die $!;
	print MANIFEST join("\n",@manifest);
	print OUT join('',@print_buffer);
	close MANIFEST;
	die "Caught signal $!";
	}




sub calc_distance{
	open (IN , '<' , $_[0]) || die $! if (-e $_[0]);
	my @lines =<IN>; chomp @lines; close IN;
	my %alignments;

	my $n_records = @lines;
	my @marked_for_deletion;

	for my $i (0..$n_records-1){
		for my $j ($i+1..$n_records-1){
			my $to_delete = greedy_overlap($lines[$i] , $lines[$j] , $i , $j);
			push @marked_for_deletion , $to_delete if $to_delete;
			}
		}

	

	@marked_for_deletion = do {my %seen ; grep {!$seen{$_}++} @marked_for_deletion};
	map{$lines[$_] = '' if defined ($_)}@marked_for_deletion;

	my $numerator = 0;
	my $length = 0;


	map {
		if ($_){
			my @line = split(/\s/,$_);
			$numerator+=($line[4]*($line[6]/100));
			$numerator+=($line[5]*($line[6]/100));
			$length+=($line[4]+$line[5]);
			}
		}@lines;

	my $return = ($length == 0 || $numerator == 0 ) ? 0 : 1-($numerator/$length);
	return $return;
}


sub greedy_overlap{
	my ($line1 , $line2 ,$index1,$index2 ) = @_;
	#split to array refs
	$line1 = [split(/\s+/ , $line1)];
	$line2 = [split(/\s+/ , $line2)];
	
	#swap in place for well formed ranges. (Not sure this is strictly needed but better safe than sorry)
	($line1->[1] , $line1->[0] ) = ( $line1->[0] , $line1->[1] )if ($line1->[0] > $line1->[1]);
	($line2->[1] , $line2->[0] ) = ( $line2->[0] , $line2->[1] )if ($line2->[0] > $line2->[1]);

	($line1->[3] , $line1->[2] ) = ( $line1->[2] , $line1->[3] )if ($line1->[2] > $line1->[3]);
	($line2->[3] , $line2->[2] ) = ( $line2->[2] , $line2->[3] )if ($line2->[2] > $line2->[3]);

	my $overlap = 0;

	#alignment on same ref , Check for overlap
	if ($line1->[11] eq $line2->[11]){
		$overlap = 1 if ($line1->[0] <= $line2->[1] && $line2->[0] <= $line1->[1]);
		}

	#alignment on same query , check for overlap
	if ($line1->[12] eq $line2->[12]){
		$overlap = 1 if ($line1->[2] <= $line2->[3] && $line2->[2] <= $line1->[3]);
		}


	if ($overlap){
	
			my @pairs = (
				[$line1->[4] , $index2],
				[$line2->[4] , $index1],
				[$line1->[5] , $index2],
				[$line2->[5] , $index1]
				);
			@pairs = sort{ $b->[0] <=> $a->[0]} @pairs;

			return $pairs[0]->[1];
		}

	return undef;
}

sub usage{
 print './CalculateDistances --manifest <file>\n';
 return;
}

