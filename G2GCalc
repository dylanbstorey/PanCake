#!/usr/bin/perl
# Copyright (c) 2015 Dylan B Storey

# Permission is hereby granted, free of charge, to any person obtaining a
# copy of this software and associated documentation files (the "Software"),
# to deal in the Software without restriction, including without limitation
# the rights to use, copy, modify, merge, publish, distribute, sublicense,
# and/or sell copies of the Software, and to permit persons to whom the
# Software is furnished to do so, subject to the following conditions:

# The above copyright notice and this permission notice shall be included in
# all copies or substantial portions of the Software.

# THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
# IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
# FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE
# AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER
# LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING
# FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
# DEALINGS IN THE SOFTWARE.

use warnings;
use strict;
use threads;
use Thread::Queue;
use Thread::Semaphore;
use Getopt::Long;
use Data::Dumper;

my @files;
my $threads = 1;
my $manifest = '';
my $output = {};
my $out ;

GetOptions(
	'manifest:s' => \$manifest,
	'threads:i' => \$threads,
	'files=s@{,}' => \@files,
	'out:s' => \$out
	) || die $!;



if ($manifest){
#If there is a manifest file , open it push it to files and remove new lines
	die "$manifest doesn't exist\n" unless -e $manifest;
	open (IN , '<' , $manifest) || die $!;
	push @files , <IN>;
	chomp @files;
	close IN;
	}



if ($threads ==1 ){
	for my $i (@files){
		for my $j (@files){
			$output->{$i}->{$j} = run_mummer($i,$j);
			}
		}

	}
else{
	my $queue = Thread::Queue->new();
	my @threads = ();

	for my $i (@files){
		for my $j (@files){
			$queue->enqueue([$i,$j]);
			}
		}

	$queue->end();

	map{	
		push @threads , threads->create(
			sub {
				my $little = { };
				while(my $pair = $queue->dequeue()){
					$little->{$pair->[0]}->{$pair->[1]} = run_mummer($pair->[0] , $pair->[1]);
					}
				return $little;
				}
			);
		}(1..$threads);

	map {
		my $return = $_->join();
		map {
			my $row = $_;
			map{
				$output->{$row}->{$_} = $return->{$row}->{$_};
				} keys %{$return->{$row}};
			} keys %{$return};
		}@threads;

	}

open (OUT , '>' , $out) || die $!;
print OUT join("\t",(scalar keys %{$output}) , sort keys %{$output}) . "\n";	
map {
	my $row = $_;
	print OUT $row . "\t";
	map {
		if (defined $output->{$row}->{$_}){
			printf OUT "%.5f \t" ,$output->{$row}->{$_} ;
			}
		else{
			print OUT "X\t";
			}
		} sort keys %{$output->{$row}};
	print OUT "\n";
	} sort keys %{$output};
close OUT;
exit;


sub run_mummer{
	my $ref = shift;
	my $query = shift;
	my $out = $ref .'_'. $query; $out =~ s/\//_/g;
	my $mummer = "nucmer -mum -l 44 $ref $query -p $out  2> /dev/null";

	unless (-e "$out.delta"){
		unless (system($mummer) == 0){
			unlink("$out.delta");
			unlink("$out.ntref");
			unlink("$out.mgaps");
			print STDERR "$ref vs $query mummer search failed \n";
			return undef;
			}
		}

	my $show_coords = "show-coords -dTlorH $out.delta >$out.coords 2> /dev/null";
	
	unless (-e "$out.coords" ){
		unless(system($show_coords)== 0){
			unlink("$out.coords");
			print STDERR "$ref\_$query show-coords failed";
			return undef;
			}
		}

	return calc_distance("$out.coords");
	}


sub calc_distance{
	open (IN , '<' , $_[0]) || die $! if (-e $_[0]);
	my @lines =<IN>; chomp @lines; close IN;
	my %alignments;

	my $n_records = @lines;
	my @marked_for_deletion;

	for my $i (0..$n_records-1){
		for my $j ($i+1..$n_records-1){
			my $to_delete = greedy_overlap($lines[$i] , $lines[$j] , $i , $j);
			push @marked_for_deletion , $to_delete if $to_delete;
			}
		}

	

	@marked_for_deletion = do {my %seen ; grep {!$seen{$_}++} @marked_for_deletion};
	map{$lines[$_] = '' if defined ($_)}@marked_for_deletion;

	my $numerator = 0;
	my $length = 0;


	map {
		if ($_){
			my @line = split(/\s/,$_);
			$numerator+=($line[4]*($line[6]/100));
			$numerator+=($line[5]*($line[6]/100));
			$length+=($line[4]+$line[5]);
			}
		}@lines;

	my $return = ($length == 0 || $numerator == 0 ) ? 0 : 1-($numerator/$length);
	return $return;
}


sub greedy_overlap{
	my ($line1 , $line2 ,$index1,$index2 ) = @_;

	
	#split to array refs
	$line1 = [split(/\s+/ , $line1)];
	$line2 = [split(/\s+/ , $line2)];

	#swap in place for well formed ranges. (Not sure this is strictly needed but better safe than sorry)
	($line1->[1] , $line1->[0] ) = ( $line1->[0] , $line1->[1] )if ($line1->[0] > $line1->[1]);
	($line2->[1] , $line2->[0] ) = ( $line2->[0] , $line2->[1] )if ($line2->[0] > $line2->[1]);

	($line1->[3] , $line1->[2] ) = ( $line1->[2] , $line1->[3] )if ($line1->[2] > $line1->[3]);
	($line2->[3] , $line2->[2] ) = ( $line2->[2] , $line2->[3] )if ($line2->[2] > $line2->[3]);

	my $overlap = 0;

	#alignment on same ref , Check for overlap
	if ($line1->[11] eq $line2->[11]){
		$overlap = 1 if ($line1->[0] <= $line2->[1] && $line2->[0] <= $line1->[1]);
		}

	#alignment on same query , check for overlap
	if ($line1->[12] eq $line2->[12]){
		$overlap = 1 if ($line1->[2] <= $line2->[3] && $line2->[2] <= $line1->[3]);
		}


	if ($overlap){
	
			my @pairs = (
				[$line1->[4] , $index2],
				[$line2->[4] , $index1],
				[$line1->[5] , $index2],
				[$line2->[5] , $index1]
				);
			@pairs = sort{ $b->[0] <=> $a->[0]} @pairs;

			return $pairs[0]->[1];
		}

	return undef;
}


